#!/bin/bash

# Requires: bash 4.0+
# Optional dependencies: xorg-xdpyinfo (resoluton detection)
#                        scrot (screenshot taking)
#                        curl (screenshot uploading)

#LANG=C
#LANGUAGE=C
#LC_ALL=C

######################
# Settings for fetcher
######################

# This setting controls what ASCII logo is displayed.
# distro="Linux"

# This sets the information to be displayed. Available: distro, Kernel, DE, WM, Win_theme, Theme, Icons, Font, Background, ASCII.
# To get just the information, and not a text-art logo, you would take "ASCII" out of the below variable.
display=(
    'distro'
    'kernel'
    'uptime'
    'res'
    'cpu'
    'disk'
    'gpu'
    'mem'
)

# Colors to use for the information found. These are set below according to distribution.
# If you would like to set your OWN color scheme for these, uncomment the lines below and edit them to your heart's content.
# textcolor="\e[0m"
# labelcolor="\e[1;34m"

# Verbose Setting - Set to 1 for verbose output.
verbosity=

#############################################
#### CODE No need to edit past here CODE ####
#############################################

# https://github.com/KittyKatt/screenFetch/issues/549
if [[ "${OSTYPE}" =~ "linux" || "${OSTYPE}" == "gnu" ]]; then
	# issue seems to affect Ubuntu; add LSB directories if it appears on other distros too
	export GIO_EXTRA_MODULES="/usr/lib/x86_64-linux-gnu/gio/modules:/usr/lib/i686-linux-gnu/gio/modules:$GIO_EXTRA_MODULES"
fi

#########################################
# Static Variables and Common Functions #
#########################################
c0=$'\033[0m' # Reset Text
bold=$'\033[1m' # Bold Text
underline=$'\033[4m' # Underline Text
display_index=0


# Static Color Definitions
colorize () {
	printf $'\033[0m\033[38;5;%sm' "$1"
}

getColor () {
	local tmp_color=""
	if [[ -n "$1" ]]; then
		if [[ ${BASH_VERSINFO[0]} -ge 4 ]]; then
			if [[ ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -gt 1 ]] || [[ ${BASH_VERSINFO[0]} -gt 4 ]]; then
				tmp_color=${1,,}
			else
				tmp_color="$(tr '[:upper:]' '[:lower:]' <<< "${1}")"
			fi
		else
			tmp_color="$(tr '[:upper:]' '[:lower:]' <<< "${1}")"
		fi
		case "${tmp_color}" in
			# Standards
			'black')					color_ret='\033[0m\033[30m';;
			'red')						color_ret='\033[0m\033[31m';;
			'green')					color_ret='\033[0m\033[32m';;
			'brown')					color_ret='\033[0m\033[33m';;
			'blue')						color_ret='\033[0m\033[34m';;
			'purple')					color_ret='\033[0m\033[35m';;
			'cyan')						color_ret='\033[0m\033[36m';;
			'yellow')					color_ret='\033[0m\033[1;33m';;
			'white')					color_ret='\033[0m\033[1;37m';;
			# Bolds
			'dark grey'|'dark gray')	color_ret='\033[0m\033[1;30m';;
			'light red')				color_ret='\033[0m\033[1;31m';;
			'light green')				color_ret='\033[0m\033[1;32m';;
			'light blue')				color_ret='\033[0m\033[1;34m';;
			'light purple')				color_ret='\033[0m\033[1;35m';;
			'light cyan')				color_ret='\033[0m\033[1;36m';;
			'light grey'|'light gray')	color_ret='\033[0m\033[37m';;
			# Some 256 colors
			'orange')					color_ret="$(colorize '202')";; #DarkOrange
			'light orange') 			color_ret="$(colorize '214')";; #Orange1
			# HaikuOS
			'black_haiku') 				color_ret="$(colorize '7')";;
			#ROSA color
			'rosa_blue') 				color_ret='\033[01;38;05;25m';;
			# ArcoLinux
			'arco_blue') color_ret='\033[1;38;05;111m';;
		esac
		[[ -n "${color_ret}" ]] && echo "${color_ret}"
	fi
}

verboseOut () {
	if [[ "$verbosity" -eq "1" ]]; then
		printf '\033[1;31m:: \033[0m%s\n' "$1"
	fi
}


####################
#  Color Defines
####################

colorNumberToCode () {
	local number="$1"
	if [[ "${number}" == "na" ]]; then
		unset code
	elif [[ $(tput colors) -eq "256" ]]; then
		code=$(colorize "${number}")
	else
		case "$number" in
			0|00) code=$(getColor 'black');;
			1|01) code=$(getColor 'red');;
			2|02) code=$(getColor 'green');;
			3|03) code=$(getColor 'brown');;
			4|04) code=$(getColor 'blue');;
			5|05) code=$(getColor 'purple');;
			6|06) code=$(getColor 'cyan');;
			7|07) code=$(getColor 'light grey');;
			8|08) code=$(getColor 'dark grey');;
			9|09) code=$(getColor 'light red');;
			  10) code=$(getColor 'light green');;
			  11) code=$(getColor 'yellow');;
			  12) code=$(getColor 'light blue');;
			  13) code=$(getColor 'light purple');;
			  14) code=$(getColor 'light cyan');;
			  15) code=$(getColor 'white');;
			*) unset code;;
		esac
	fi
	echo -n "${code}"
}

detectColors () {
	my_colors=$(sed 's/^,/na,/;s/,$/,na/;s/,/ /' <<< "${OPTARG}")
	my_lcolor=$(awk -F' ' '{print $1}' <<< "${my_colors}")
	my_lcolor=$(colorNumberToCode "${my_lcolor}")
	my_hcolor=$(awk -F' ' '{print $2}' <<< "${my_colors}")
	my_hcolor=$(colorNumberToCode "${my_hcolor}")
}

#########################
# Begin Detection Phase
#########################

# Distro Detection - Begin
detectdistro () {
	distro="Manjaro"
	verboseOut "Finding distro...found as '${distro} ${distro_release}'"
}
# Distro Detection - End

# Host and User detection - Begin
detecthost () {
	myUser=${USER}
	myHost=${HOSTNAME}
	if [[ -z "$USER" ]]; then
		myUser=$(whoami)
	fi
	verboseOut "Finding hostname and user...found as '${myUser}@${myHost}'"
}


# Kernel Version Detection - Begin
detectkernel () {
    # compatibility for older versions of OS X:
    kernel=$(uname -m && uname -sr)
    kernel=${kernel//$'\n'/ }
    #kernel=( $(uname -srm) )
    #kernel="${kernel[${#kernel[@]}-1]} ${kernel[@]:0:${#kernel[@]}-1}"
    verboseOut "Finding kernel version...found as '${kernel}'"
}
# Kernel Version Detection - End

# Uptime Detection - Begin
detectuptime () {
	unset uptime
    if [[ -f /proc/uptime ]]; then
        uptime=$(</proc/uptime)
        uptime=${uptime//.*}
    fi

	if [[ -n ${uptime} ]] && [[ "${distro}" != "Haiku" ]]; then
		mins=$((uptime/60%60))
		hours=$((uptime/3600%24))
		days=$((uptime/86400))
		uptime="${mins}m"
		if [ "${hours}" -ne "0" ]; then
			uptime="${hours}h ${uptime}"
		fi
		if [ "${days}" -ne "0" ]; then
			uptime="${days}d ${uptime}"
		fi
	fi
	verboseOut "Finding current uptime...found as '${uptime}'"
}
# Uptime Detection - End

# Resolution Detection - Begin
detectres () {
	xResolution="No X Server"
	if [[ -n ${DISPLAY} ]]; then
		if type -p xdpyinfo >/dev/null 2>&1; then
			xResolution=$(xdpyinfo | awk '/^ +dimensions/ {print $2}')
		fi
	fi
	verboseOut "Finding current resolution(s)...found as '$xResolution'"
}
# Resolution Detection - End

# CPU Detection - Begin
detectcpu () {
	local REGEXP="-r"
    cpu=$(awk -F':' '/^model name/ {split($2, A, " @"); print A[1]; exit}' /proc/cpuinfo)
    cpun=$(grep -c '^processor' /proc/cpuinfo)
    if [ -z "$cpu" ]; then
        cpu=$(awk 'BEGIN{FS=":"} /Hardware/ { print $2; exit }' /proc/cpuinfo)
    fi
    if [ -z "$cpu" ]; then
        cpu=$(awk 'BEGIN{FS=":"} /^cpu/ { gsub(/  +/," ",$2); print $2; exit}' /proc/cpuinfo | sed 's/, altivec supported//;s/^ //')
        if [[ $cpu =~ ^(PPC)*9.+ ]]; then
            model="IBM PowerPC G5 "
        elif [[ $cpu =~ 740/750 ]]; then
            model="IBM PowerPC G3 "
        elif [[ $cpu =~ ^74.+ ]]; then
            model="Motorola PowerPC G4 "
        elif [[ $cpu =~ ^POWER.* ]]; then
            model="IBM POWER "
        elif grep -q -i 'BCM2708' /proc/cpuinfo ; then
            model="Broadcom BCM2835 ARM1176JZF-S"
        else
            arch=$(uname -m)
            if [[ "$arch" == "s390x" || "$arch" == "s390" ]]; then
                cpu=""
                args=$(grep 'machine' /proc/cpuinfo | sed 's/^.*://g; s/ //g; s/,/\n/g' | grep '^machine=.*')
                eval "$args"
                case "$machine" in
                    # information taken from https://github.com/SUSE/s390-tools/blob/master/cputype
                    2064) model="IBM eServer zSeries 900" ;;
                    2066) model="IBM eServer zSeries 800" ;;
                    2084) model="IBM eServer zSeries 990" ;;
                    2086) model="IBM eServer zSeries 890" ;;
                    2094) model="IBM System z9 Enterprise Class" ;;
                    2096) model="IBM System z9 Business Class" ;;
                    2097) model="IBM System z10 Enterprise Class" ;;
                    2098) model="IBM System z10 Business Class" ;;
                    2817) model="IBM zEnterprise 196" ;;
                    2818) model="IBM zEnterprise 114" ;;
                    2827) model="IBM zEnterprise EC12" ;;
                    2828) model="IBM zEnterprise BC12" ;;
                    2964) model="IBM z13" ;;
                        *) model="IBM S/390 machine type $machine" ;;
                esac
            elif [[ "$arch" == "aarch64" ]]; then
                cpu_vendor=$(lscpu | grep ^Vendor | sed 's/^.*://g; s/ //g; s/,/\n/g')
                cpu=$(lscpu | grep ^Model\ name: | sed 's/^.*://g; s/ //g; s/,/\n/g')
                cpu="${cpu_vendor} ${cpu}"
            else
                model="Unknown"
            fi
        fi
        cpu="${model}${cpu}"
    fi
    loc="/sys/devices/system/cpu/cpu0/cpufreq"
    bl="${loc}/bios_limit"
    smf="${loc}/scaling_max_freq"
    if [ -f "$bl" ] && [ -r "$bl" ]; then
        cpu_mhz=$(awk '{print $1/1000}' "$bl")
    elif [ -f "$smf" ] && [ -r "$smf" ]; then
        cpu_mhz=$(awk '{print $1/1000}' "$smf")
    else
        cpu_mhz=$(awk -F':' '/cpu MHz/{ print int($2+.5) }' /proc/cpuinfo | head -n 1)
    fi
    if [ -n "$cpu_mhz" ]; then
        if [ "${cpu_mhz%.*}" -ge 1000 ]; then
            cpu_ghz=$(awk '{print $1/1000}' <<< "${cpu_mhz}")
            cpufreq="${cpu_ghz}GHz"
        else
            cpufreq="${cpu_mhz}MHz"
        fi
    fi

	if [[ "${cpun}" -gt "1" ]]; then
		cpun="${cpun}x "
	else
		cpun=""
	fi
	if [ -z "$cpufreq" ]; then
		cpu="${cpun}${cpu}"
	else
		cpu="$cpu @ ${cpun}${cpufreq}"
	fi
	if [ -d '/sys/class/hwmon/' ]; then
		for dir in /sys/class/hwmon/* ; do
			hwmonfile=""
			[ -e "$dir/name" ] && hwmonfile=$dir/name
			[ -e "$dir/device/name" ] && hwmonfile=$dir/device/name
			[ -n "$hwmonfile" ] && if grep -q 'coretemp' "$hwmonfile"; then
				thermal="$dir/temp1_input"
				break
			fi
		done
		if [ -e "$thermal" ] && [ "${thermal:+isSetToNonNull}" = 'isSetToNonNull' ]; then
			temperature=$(bc <<< "scale=1; $(cat "$thermal")/1000")
		fi
	fi
	if [ -n "$temperature" ]; then
		cpu="$cpu [${temperature}°C]"
	fi
	cpu=$(sed $REGEXP 's/\([tT][mM]\)|\([Rr]\)|[pP]rocessor|CPU//g' <<< "${cpu}" | xargs)
	verboseOut "Finding current CPU...found as '$cpu'"
}
# CPU Detection - End

# GPU Detection - Begin (EXPERIMENTAL!)
detectgpu () {

	if [[ -n "$(PATH="/usr/sbin:$PATH" type -p glxinfo)" && -z "${gpu}" ]]; then
		gpu_info=$($(PATH="/usr/sbin:$PATH" type -p glxinfo | cut -f1) 2>/dev/null)
		gpu=$(grep "OpenGL renderer string" <<< "${gpu_info}" | cut -d ':' -f2 | sed -n -e '1h;2,$H;${g;s/\n/, /g' -e 'p' -e '}')
		gpu="${gpu:1}"
		gpu_info=$(grep "OpenGL vendor string" <<< "${gpu_info}")
	elif [[ -n "$(PATH="/usr/sbin:$PATH" type -p lspci)" && -z "$gpu" ]]; then
		gpu_info=$($(PATH="/usr/bin:$PATH" type -p lspci | cut -f1) 2> /dev/null | grep VGA)
		gpu=$(grep -oE '\[.*\]' <<< "${gpu_info}" | sed 's/\[//;s/\]//' | sed -n -e '1h;2,$H;${g;s/\n/, /g' -e 'p' -e '}')
	fi


	if [ -n "$gpu" ];then
		if grep -q -i 'nvidia' <<< "${gpu_info}"; then
			gpu_info="NVidia "
		elif grep -q -i 'intel' <<< "${gpu_info}"; then
			gpu_info="Intel "
		elif grep -q -i 'amd' <<< "${gpu_info}"; then
			gpu_info="AMD "
		elif grep -q -i 'ati' <<< "${gpu_info}" || grep -q -i 'radeon' <<< "${gpu_info}"; then
			gpu_info="ATI "
		else
			gpu_info=$(cut -d ':' -f2 <<< "${gpu_info}")
			gpu_info="${gpu_info:1} "
		fi
		gpu="${gpu}"
	else
		gpu="Not Found"
	fi

	verboseOut "Finding current GPU...found as '$gpu'"
}
# GPU Detection - End

# Detect Intel GPU  #works in dash
# Run it only on Intel Processors if GPU is unknown
DetectIntelGPU() {
	if [ -r /proc/fb ]; then
		gpu=$(awk 'BEGIN {ORS = " &"} {$1="";print}' /proc/fb | sed  -r s/'^\s+|\s*&$'//g)
	fi

	case $gpu in
		*mfb)
			gpu=$(lspci | grep -i vga | awk -F ": " '{print $2}')
			;;
		*intel*)
			gpu="intel"
			;;
		*)
			gpu="Not Found"
			;;
	esac

	if [[ "$gpu" = "intel" ]]; then
		#Detect CPU
		local CPU=$(uname -p | awk '{print $3}')
		CPU=${CPU#*'-'}; #Detect CPU number

		#Detect Intel GPU
		case $CPU in
			[3-6][3-9][0-5]|[3-6][3-9][0-5][K-Y])
				gpu='Intel HD Graphics'
				;; #1st
			2[1-5][0-3][0-2]*|2390T|2600S)
				gpu='Intel HD Graphics 2000'
				;; #2nd
			2[1-5][1-7][0-8]*|2105|2500K)
				gpu='Intel HD Graphics 3000'
				;; #2nd
			32[1-5]0*|3[4-5][5-7]0*|33[3-4]0*)
				gpu='Intel HD Graphics 2500'
				;; #3rd
			3570K|3427U)
				gpu='Intel HD Graphics 4000'
				;; #3rd
			4[3-7][0-9][0-5]*)
				gpu='Intel HD Graphics 4600'
				;; #4th Haswell
			5[5-6]75[C-R]|5350H)
				gpu='Intel Iris Pro Graphics 6200'
				;; #5th Broadwell
				#6th Skylake
				#7th Kabylake
				#8th Cannonlake
			*)
				gpu='Unknown'
				;; #Unknown GPU model
		esac
	fi
}

# Disk Usage Detection - Begin
detectdisk () {
	diskusage="Unknown"
	if type -p df >/dev/null 2>&1; then
		totaldisk=$(df -h -x aufs -x tmpfs -x overlay -x drvfs --total 2>/dev/null | tail -1)
		disktotal=$(awk '{print $2}' <<< "${totaldisk}")
		diskused=$(awk '{print $3}' <<< "${totaldisk}")
		diskusedper=$(awk '{print $5}' <<< "${totaldisk}")
		diskusage="${diskused} / ${disktotal} (${diskusedper})"
		diskusage_verbose=$(sed 's/%/%%/' <<< "$diskusage")
	fi
	verboseOut "Finding current disk usage...found as '$diskusage_verbose'"
}
# Disk Usage Detection - End

# Memory Detection - Begin
detectmem () {
    mem=$(free -b | awk -F ':' 'NR==2{print $2}' | awk '{print $1"-"$6}')
    usedmem=$((mem / 1024 / 1024))
    totalmem=$((${mem//-*} / 1024 / 1024))
	mem="${usedmem}MiB / ${totalmem}MiB"
	verboseOut "Finding current RAM usage...found as '$mem'"
}
# Memory Detection - End

infoDisplay () {
	c1=$(getColor 'light green')
	labelcolor=$(getColor 'light green')
	textcolor="\033[0m"
	[[ "$my_hcolor" ]] && textcolor="${my_hcolor}"

	#########################
	# Info Variable Setting #
	#########################
    if [ "$gpu" = 'Not Found' ] ; then
        DetectIntelGPU
    fi
    if [[ "${display[@]}" =~ "distro" ]]; then
        if [ -n "$distro_more" ]; then
            mydistro=$(echo -e "$labelcolor OS:$textcolor $distro_more")
        else
            mydistro=$(echo -e "$labelcolor OS:$textcolor $distro $sysArch")
        fi
    fi
    if [[ "${display[@]}" =~ "kernel" ]]; then
        mykernel=$(echo -e "$labelcolor Kernel:$textcolor $kernel")
    fi
    if [[ "${display[@]}" =~ "uptime" ]]; then
        myuptime=$(echo -e "$labelcolor Uptime:$textcolor $uptime")
    fi
    if [[ "${display[@]}" =~ "res" && -n "$xResolution" ]]; then
        myres=$(echo -e "$labelcolor Resolution:${textcolor} $xResolution")
    fi
    if [[ "${fake_distro}" != "Cygwin" && "${fake_distro}" != "Msys" && "${fake_distro}" != "Windows - Modern" && "${display[@]}" =~ "disk" ]]; then
        mydisk=$(echo -e "$labelcolor Disk:$textcolor $diskusage")
    fi
    if [[ "${display[@]}" =~ "cpu" ]]; then
        mycpu=$(echo -e "$labelcolor CPU:$textcolor $cpu")
    fi
    if [[ "${display[@]}" =~ "gpu" ]] && [[ "$gpu" != "Not Found" ]]; then
        mygpu=$(echo -e "$labelcolor GPU:$textcolor $gpu")
    fi
    if [[ "${display[@]}" =~ "mem" ]]; then
        mymem=$(echo -e "$labelcolor RAM:$textcolor $mem")
    fi

	fulloutput=("\n"
"${c1} ████████████  █████    $mydistro\n"
"${c1} ████████████  █████    $mykernel\n"
"${c1} █████         █████    $myuptime\n"
"${c1} █████  █████  █████    $myres\n"
"${c1} █████  █████  █████    $mydisk\n"
"${c1} █████  █████  █████    $mycpu\n"
"${c1} █████  █████  █████    $mygpu\n"
"${c1} █████  █████  █████    $mymem\n"
"                             ")

	echo -e $fulloutput

}

##################
# Let's Do This!
##################

for i in "${display[@]}"; do
	if [[ -n "$i" ]]; then
		if [[ "${display[*]}" =~ "$i" ]]; then
			if [[ "$errorSuppress" == "1" ]]; then
				detect"${i}" 2>/dev/null
			else
				detect"${i}"
			fi
		fi
	fi
done

infoDisplay
